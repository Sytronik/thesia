/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum GuardClippingMode {
  Clip = 'Clip',
  ReduceGlobalLevel = 'ReduceGlobalLevel',
  Limiter = 'Limiter'
}
export const enum FreqScale {
  Linear = 'Linear',
  Mel = 'Mel'
}
export interface SpecSetting {
  winMillisec: number
  tOverlap: number
  fOverlap: number
  freqScale: FreqScale
}
export interface DrawOption {
  pxPerSec: number
  height: number
}
export declare function init(): void
export declare function addTracks(idList: Array<number>, pathList: Array<string>): Promise<Array<number>>
export declare function reloadTracks(trackIds: Array<number>): Promise<Array<number>>
export declare function removeTracks(trackIds: Array<number>): void
export declare function applyTrackListChanges(): Promise<Array<string>>
export declare function setImageState(idChStrs: Array<string>, startSec: number, width: number, option: DrawOption, optForWav: any, blend: number): Promise<void>
export declare function getdBRange(): number
export declare function setdBRange(dBRange: number): void
export declare function getHzRange(): number[]
export declare function setHzRange(minHz: number, maxHz: number): boolean
export declare function getSpecSetting(): SpecSetting
export declare function setSpecSetting(specSetting: SpecSetting): Promise<void>
export declare function getCommonGuardClipping(): GuardClippingMode
export declare function setCommonGuardClipping(mode: GuardClippingMode): Promise<void>
export declare function getCommonNormalize(): any
export declare function setCommonNormalize(target: any): Promise<void>
export declare function getImages(): Record<string, Buffer>
export declare function findIdByPath(path: string): Promise<number>
export declare function getOverview(trackId: number, width: number, height: number, dpr: number): Promise<Buffer>
export declare function convertFreqPosToHz(y: number, height: number, hzRange?: [number, number] | undefined | null): Promise<number>
export declare function convertFreqHzToPos(hz: number, height: number, hzRange?: [number, number] | undefined | null): number
export declare function secondsToLabel(sec: number): string
export declare function getTimeAxisMarkers(startSec: number, endSec: number, tickUnit: number, labelInterval: number): Promise<any>
export declare function getFreqAxisMarkers(maxNumTicks: number, maxNumLabels: number): Promise<any>
export declare function getAmpAxisMarkers(maxNumTicks: number, maxNumLabels: number, ampRange: [number, number]): Promise<any>
export declare function getdBAxisMarkers(maxNumTicks: number, maxNumLabels: number): Promise<any>
export declare function getMaxdB(): number
export declare function getMindB(): number
export declare function getMaxTrackHz(): number
export declare function getLongestTrackLengthSec(): number
export declare function getChannelCounts(trackId: number): number
export declare function getLengthSec(trackId: number): number
export declare function getSampleRate(trackId: number): number
export declare function getSampleFormat(trackId: number): string
export declare function getGlobalLUFS(trackId: number): number
export declare function getRMSdB(trackId: number): number
export declare function getMaxPeakdB(trackId: number): number
export declare function getGuardClipStats(trackId: number): string
export declare function getPath(trackId: number): string
export declare function getFileName(trackId: number): string
export declare function getColorMap(): Buffer
export declare function setVolumedB(volumeDB: number): Promise<void>
export declare function setTrackPlayer(trackId: number, sec?: number | undefined | null): Promise<void>
export declare function seekPlayer(sec: number): Promise<void>
export declare function pausePlayer(): Promise<void>
export declare function resumePlayer(): Promise<void>
export declare function getPlayerState(): any
