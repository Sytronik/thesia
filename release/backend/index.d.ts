/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare function addTracks(idList: Array<number>, pathList: Array<string>): Promise<Array<number>>

export declare function applyTrackListChanges(): Promise<Array<string>>

export interface AudioFormatInfo {
  name: string
  sampleRate: number
  bitDepth: string
  bitrate: string
}

export declare function findIdByPath(path: string): number

export declare function freqHzToPos(hz: number, height: number, hzRange: [number, number]): number

export declare function freqLabelToHz(label: string): number

export declare function freqPosToHz(y: number, height: number, hzRange: [number, number]): number

export declare const enum FreqScale {
  Linear = 'Linear',
  Mel = 'Mel'
}

export declare function getAmpAxisMarkers(maxNumTicks: number, maxNumLabels: number, ampRange: [number, number]): any

export declare function getChannelCounts(trackId: number): number

export declare function getCommonGuardClipping(): GuardClippingMode

export declare function getCommonNormalize(): any

export declare function getdBAxisMarkers(maxNumTicks: number, maxNumLabels: number, minDB: number, maxDB: number): any

export declare function getdBRange(): number

export declare function getFileName(trackId: number): string

export declare function getFormatInfo(trackId: number): AudioFormatInfo

export declare function getFreqAxisMarkers(maxNumTicks: number, maxNumLabels: number, hzRange: [number, number], maxTrackHz: number): any

export declare function getGlobalLUFS(trackId: number): number

export declare function getGuardClipStats(trackId: number): any

export declare function getLengthSec(trackId: number): number

export declare function getLongestTrackLengthSec(): number

export declare function getMaxdB(): number

export declare function getMaxPeakdB(trackId: number): number

export declare function getMaxTrackHz(): number

export declare function getMindB(): number

export declare function getOverviewDrawingInfo(trackId: number, width: number, height: number, gapHeight: number, limiterGainHeightRatio: number, wavStrokeWidth: number, topbottomContextSize: number): Promise<OverviewDrawingInfo | null>

export declare function getPath(trackId: number): string

export declare function getPlayerState(): PlayerState

export declare function getRMSdB(trackId: number): number

export declare function getSampleRate(trackId: number): number

export declare function getSpecSetting(): SpecSetting

export declare function getSpectrogram(idChStr: string, secRange: [number, number], hzRange: [number, number], marginPx: number): Promise<Spectrogram | null>

export declare function getTimeAxisMarkers(startSec: number, endSec: number, tickUnit: number, labelInterval: number, maxSec: number): any

export declare function getWavDrawingInfo(idChStr: string, secRange: [number, number], width: number, height: number, ampRange: [number, number], wavStrokeWidth: number, topbottomContextSize: number, marginRatio: number): Promise<WavDrawingInfo | null>

export declare const enum GuardClippingMode {
  Clip = 'Clip',
  ReduceGlobalLevel = 'ReduceGlobalLevel',
  Limiter = 'Limiter'
}

export declare function hzToLabel(hz: number): string

export declare function init(userSettings: UserSettingsOptionals, maxSpectrogramSize: number): UserSettings

export interface OverviewDrawingInfo {
  chDrawingInfos: Array<WavDrawingInfo>
  limiterGainTopInfo?: WavDrawingInfo
  limiterGainBottomInfo?: WavDrawingInfo
  chHeight: number
  gapHeight: number
  limiterGainHeight: number
  chWoGainHeight: number
}

export declare function pausePlayer(): Promise<void>

export interface PlayerState {
  isPlaying: boolean
  positionSec: number
  err: string
}

export declare function reloadTracks(trackIds: Array<number>): Promise<Array<number>>

export declare function removeTracks(trackIds: Array<number>): void

export declare function resumePlayer(): Promise<void>

export declare function secondsToLabel(sec: number): string

export declare function seekPlayer(sec: number): Promise<void>

export declare function setColormapLength(colormapLength: number): Promise<void>

export declare function setCommonGuardClipping(mode: GuardClippingMode): Promise<void>

export declare function setCommonNormalize(target: any): Promise<void>

export declare function setdBRange(dBRange: number): Promise<void>

export declare function setSpecSetting(specSetting: SpecSetting): Promise<void>

export declare function setTrackPlayer(trackId: number, sec?: number | undefined | null): Promise<void>

export declare function setVolumedB(volumeDB: number): Promise<void>

export interface SpecSetting {
  winMillisec: number
  tOverlap: number
  fOverlap: number
  freqScale: FreqScale
}

export interface Spectrogram {
  buf: Buffer
  width: number
  height: number
  startSec: number
  pxPerSec: number
  leftMargin: number
  rightMargin: number
  topMargin: number
  bottomMargin: number
  isLowQuality: boolean
}

export declare function timeLabelToSeconds(label: string): number

export interface UserSettings {
  specSetting: SpecSetting
  blend: number
  dBRange: number
  commonGuardClipping: GuardClippingMode
  commonNormalize: any
}

export interface UserSettingsOptionals {
  specSetting?: SpecSetting
  blend?: number
  dBRange?: number
  commonGuardClipping?: GuardClippingMode
  commonNormalize?: any
}

export interface WavDrawingInfo {
  line?: Buffer
  topEnvelope?: Buffer
  bottomEnvelope?: Buffer
  startSec: number
  pointsPerSec: number
  preMargin: number
  postMargin: number
  clipValues?: Array<number>
}
