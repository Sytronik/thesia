/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface DrawOption {
  pxPerSec: number
  height: number
}
export const enum GuardClippingMode {
  Clip = 'Clip',
  ReduceGlobalLevel = 'ReduceGlobalLevel',
  Limiter = 'Limiter'
}
export const enum FreqScale {
  Linear = 'Linear',
  Mel = 'Mel'
}
export interface SpecSetting {
  winMillisec: number
  tOverlap: number
  fOverlap: number
  freqScale: FreqScale
}
export function init(): void
export function addTracks(idList: Array<number>, pathList: Array<string>): Promise<Array<number>>
export function reloadTracks(trackIds: Array<number>): Promise<Array<number>>
export function removeTracks(trackIds: Array<number>): Promise<void>
export function applyTrackListChanges(): Promise<Array<string>>
export function setImageState(idChStrs: Array<string>, startSec: number, width: number, option: DrawOption, optForWav: any, blend: number): Promise<void>
export function getdBRange(): number
export function setdBRange(dBRange: number): void
export function getSpecSetting(): SpecSetting
export function setSpecSetting(specSetting: SpecSetting): Promise<void>
export function getCommonGuardClipping(): GuardClippingMode
export function setCommonGuardClipping(mode: GuardClippingMode): Promise<void>
export function getCommonNormalize(): any
export function setCommonNormalize(target: any): Promise<void>
export function getImages(): Record<string, Buffer>
export function findIdByPath(path: string): Promise<number>
export function getOverview(trackId: number, width: number, height: number, dpr: number): Promise<Buffer>
export function getHzAt(y: number, height: number): Promise<number>
export function getTimeAxisMarkers(startSec: number, endSec: number, tickUnit: number, labelInterval: number): Promise<any>
export function getFreqAxisMarkers(maxNumTicks: number, maxNumLabels: number): Promise<any>
export function getAmpAxisMarkers(maxNumTicks: number, maxNumLabels: number, ampRange: [number, number]): Promise<any>
export function getdBAxisMarkers(maxNumTicks: number, maxNumLabels: number): Promise<any>
export function getMaxdB(): number
export function getMindB(): number
export function getLongestTrackLengthSec(): number
export function getChannelCounts(trackId: number): number
export function getLengthSec(trackId: number): number
export function getSampleRate(trackId: number): number
export function getSampleFormat(trackId: number): string
export function getGlobalLUFS(trackId: number): number
export function getRMSdB(trackId: number): number
export function getMaxPeakdB(trackId: number): number
export function getPath(trackId: number): string
export function getFileName(trackId: number): string
export function getColorMap(): Buffer
